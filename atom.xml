<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LunaSelene&#39;Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.lunaselene.cn/"/>
  <updated>2018-04-21T00:00:00.000Z</updated>
  <id>http://blog.lunaselene.cn/</id>
  
  <author>
    <name>LunaSelene</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用gitlab构建基于docker的持续集成（三）</title>
    <link href="http://blog.lunaselene.cn/%E4%BD%BF%E7%94%A8gitlab%E6%9E%84%E5%BB%BA%E5%9F%BA%E4%BA%8Edocker%E7%9A%84%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%88%E4%B8%89%EF%BC%89.html"/>
    <id>http://blog.lunaselene.cn/使用gitlab构建基于docker的持续集成（三）.html</id>
    <published>2018-04-21T00:00:00.000Z</published>
    <updated>2018-04-21T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="构建发布思路："><a href="#构建发布思路：" class="headerlink" title="构建发布思路："></a>构建发布思路：</h1><p>1.构建单元测试镜像，上传镜像仓库。<br>2.拉取测试镜像，执行单元测试。<br>3.构建发布镜像，上传镜像仓库。<br>4.使用docker-compose编排发布镜像和数据库镜像，打包发布，我把项目也发布到了gitlab.luna.cn服务器</p><h1 id="aspnetcore-下的dockerfile编写"><a href="#aspnetcore-下的dockerfile编写" class="headerlink" title="aspnetcore 下的dockerfile编写"></a>aspnetcore 下的dockerfile编写</h1><p><img src="https://www.github.com/loveshullf/Notes/raw/img/小书匠/使用gitlab构建基于docker的持续集成（三）-2018-4/1524192992754.jpg" alt="我的aspnetcore目录结构"><br>dockerfile的编写，参考了dotnet官方的例子，是用分层配置，这样只要写一个dockerfile就可以了。</p><pre><code class="dockerfile">FROM microsoft/dotnet:2.0-sdk AS buildWORKDIR /app# copy csproj and restore as distinct layersCOPY *.sln .COPY User.Api/*.csproj ./User.Api/COPY User.Api.UnitTest/*.csproj ./User.Api.UnitTest/RUN dotnet restore# copy everything else and build appCOPY . .WORKDIR /app//User.ApiRUN dotnet buildFROM build AS testrunnerWORKDIR /app/User.Api.UnitTestENTRYPOINT [&quot;dotnet&quot;, &quot;test&quot;, &quot;--logger:trx&quot;]FROM build AS publishWORKDIR /app/User.ApiRUN dotnet publish -c Release -o outFROM microsoft/aspnetcore:2.0 AS runtimeWORKDIR /appENV ASPNETCORE_URLS http://+:80EXPOSE 80COPY --from=publish /app/User.Api/out ./ENTRYPOINT [&quot;dotnet&quot;, &quot;User.Api.dll&quot;]</code></pre><h1 id="发布docker-compose"><a href="#发布docker-compose" class="headerlink" title="发布docker-compose"></a>发布docker-compose</h1><pre><code class="yml">version: &#39;3&#39;services:  user.api:    image: gitlab.luna.cn/lunaselene/findbook.first/master:release    container_name: user.api    ports:      - &#39;8080:80&#39;    links:      - mysql-bate  mysql-bate:    image: &#39;mysql/mysql-server:5.7&#39;    restart: always    container_name: mysql-bate    volumes:      - ./mysql/data:/var/lib/mysql      - ./mysql/config/my.cnf:/etc/my.cnf      - ./mysql/init:/docker-entrypoint-initdb.d/    ports:       - &#39;3306&#39;</code></pre><h1 id="gitlab-ci-yml的编写"><a href="#gitlab-ci-yml的编写" class="headerlink" title="gitlab-ci.yml的编写"></a>gitlab-ci.yml的编写</h1><p><img src="https://www.github.com/loveshullf/Notes/raw/img/小书匠/使用gitlab构建基于docker的持续集成（三）-2018-4/1524212842718.jpg" alt="gitlab环境变量的设定"><br>安装构建思路，对应的yml文件如下</p><pre><code class="yml">image: tico/dockervariables:  CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:test  CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:release  DOCKER_DRIVER: overlay2before_script:  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY  #下面是登录远程服务器的设置sshkey操作   # 其中私有变量$SSH_PRIVATE_KEY 是远程服务器的ssh私匙   # 我使用的部署gitlab的服务器所以url是gitlab.luna.cn  - eval $(ssh-agent -s)  - ssh-add &lt;(echo &quot;$SSH_PRIVATE_KEY&quot;)  - mkdir -p ~/.ssh  - chmod 700 ~/.ssh  - ssh-keyscan gitlab.luna.cn &gt; ~/.ssh/known_hosts  - chmod 644 ~/.ssh/known_hosts  - ssh -T root@gitlab.luna.cnstages:  - build  - test  - release  - deploybuild:  stage: build  script:   - docker build --target testrunner --pull -t $CONTAINER_TEST_IMAGE .   - docker push $CONTAINER_TEST_IMAGEtest:  stage: test  script:    - docker pull $CONTAINER_TEST_IMAGE    - docker run $CONTAINER_TEST_IMAGE    #clert container    - docker rm $(docker ps -q -l)release:  stage: release  script:    - docker build --target runtime  --pull -t $CONTAINER_RELEASE_IMAGE .    - docker push $CONTAINER_RELEASE_IMAGE  only:    - masterdeploy:  stage: deploy  script:    - scp -r mysql root@gitlab.luna.cn:/root/deploy    - scp docker-compose.yml root@gitlab.luna.cn:/root/deploy    - ssh root@gitlab.luna.cn &quot;docker-compose --f /root/deploy/docker-compose.yml up -d --force-recreate &quot;    - echo &quot;Deploy to staging server&quot;  only:    - master</code></pre><h2 id="一些参数的解释"><a href="#一些参数的解释" class="headerlink" title="一些参数的解释"></a>一些参数的解释</h2><h3 id="image"><a href="#image" class="headerlink" title="image"></a>image</h3><p>代表要使用的基础docker镜像，一切构建都是在这个镜像下完成，也就是一个大环境，后面的命令必须要能在这个环境下能执行。<br>我指定这个是一个自带docker环境的镜像，它的信息可以到docker hub上查看。</p><h3 id="variables"><a href="#variables" class="headerlink" title="variables"></a>variables</h3><p>自定义变量，后面跟的是自定义的变量，$CI_REGISTRY_IMAGE等变量是gitlab-runner自带的变量。</p><h3 id="before-script"><a href="#before-script" class="headerlink" title="before_script"></a>before_script</h3><p>前置脚本，也就是每个stages运行之前都会执行的命令。</p><h3 id="stages"><a href="#stages" class="headerlink" title="stages"></a>stages</h3><p>定义CI每个步骤，这个步骤是一个执行完才执行下一个的，上一个失败，全部失败。</p><h2 id="关于远程发布ssh的补充"><a href="#关于远程发布ssh的补充" class="headerlink" title="关于远程发布ssh的补充"></a>关于远程发布ssh的补充</h2><p>由于要全自动化发布，必须实现runner所在服务器和远程发布主机的无密登录。<br>ssh无密码登录，分为单向和双向，这里用单向的就可以了。<br>因为使用的是docker in docker 的方式运行runner，所以秘钥通过gitlab的环境变量进行传递。</p><p>1.远程主机生成ssh秘钥。</p><pre><code class="bash">ssh-keygen -t rsa </code></pre><p>命令输完一直回车到完成为止。<br>2.远程主机中把公钥设置到authorized_keys。</p><pre><code class="bash">cd /root/.sshcat id_rsa.pub &gt; authorized_keys</code></pre><p>3.把私钥设置成环境变量。<br><img src="https://www.github.com/loveshullf/Notes/raw/img/小书匠/使用gitlab构建基于docker的持续集成（三）-2018-4/1524230300100.jpg" alt="私钥设置成环境变量"><br>4.gitlab-ci.yml中给运行的容器设置runner私钥。</p><pre><code class="yml">  #下面是登录远程服务器的设置sshkey操作   # 其中私有变量$SSH_PRIVATE_KEY 是远程服务器的ssh私匙   # 我使用的部署gitlab的服务器所以url是gitlab.luna.cn  - eval $(ssh-agent -s)  - ssh-add &lt;(echo &quot;$SSH_PRIVATE_KEY&quot;)  - mkdir -p ~/.ssh  - chmod 700 ~/.ssh  - ssh-keyscan gitlab.luna.cn &gt; ~/.ssh/known_hosts  - chmod 644 ~/.ssh/known_hosts  - ssh -T root@gitlab.luna.cn</code></pre><p>这样远程服务器的连接就设置完成了。</p><h1 id="提交测试"><a href="#提交测试" class="headerlink" title="提交测试"></a>提交测试</h1><p><img src="https://www.github.com/loveshullf/Notes/raw/img/小书匠/使用gitlab构建基于docker的持续集成（三）-2018-4/1524263725631.jpg" alt="build"></p><p><img src="https://www.github.com/loveshullf/Notes/raw/img/小书匠/使用gitlab构建基于docker的持续集成（三）-2018-4/1524263793401.jpg" alt="test"></p><p><img src="https://www.github.com/loveshullf/Notes/raw/img/小书匠/使用gitlab构建基于docker的持续集成（三）-2018-4/1524263833964.jpg" alt="release"></p><p><img src="https://www.github.com/loveshullf/Notes/raw/img/小书匠/使用gitlab构建基于docker的持续集成（三）-2018-4/1524263870594.jpg" alt="deploy"></p><p><img src="https://www.github.com/loveshullf/Notes/raw/img/小书匠/使用gitlab构建基于docker的持续集成（三）-2018-4/1524264252825.jpg" alt="全部通过"></p><p><img src="https://www.github.com/loveshullf/Notes/raw/img/小书匠/使用gitlab构建基于docker的持续集成（三）-2018-4/1524264237045.jpg" alt="查看发布情况"></p><p><img src="https://www.github.com/loveshullf/Notes/raw/img/小书匠/使用gitlab构建基于docker的持续集成（三）-2018-4/1524264290939.jpg" alt="本地访问查看"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h1 id=&quot;构建发布思路：&quot;&gt;&lt;a href=&quot;#构建发布思路：&quot; class=&quot;headerlink&quot; title=&quot;构建发布思路：&quot;&gt;&lt;/a&gt;构建发布思路：&lt;/h1&gt;&lt;p&gt;1.构建单元测试镜像，上传镜像仓库。&lt;br&gt;2.拉取测试镜像，执行单元测试。&lt;br&gt;3.构
      
    
    </summary>
    
      <category term="持续集成" scheme="http://blog.lunaselene.cn/categories/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
    
      <category term="gitlab" scheme="http://blog.lunaselene.cn/tags/gitlab/"/>
    
      <category term="docker" scheme="http://blog.lunaselene.cn/tags/docker/"/>
    
      <category term="aspnetcore" scheme="http://blog.lunaselene.cn/tags/aspnetcore/"/>
    
  </entry>
  
  <entry>
    <title>使用gitlab构建基于docker的持续集成（二）</title>
    <link href="http://blog.lunaselene.cn/%E4%BD%BF%E7%94%A8gitlab%E6%9E%84%E5%BB%BA%E5%9F%BA%E4%BA%8Edocker%E7%9A%84%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%88%E4%BA%8C%EF%BC%89.html"/>
    <id>http://blog.lunaselene.cn/使用gitlab构建基于docker的持续集成（二）.html</id>
    <published>2018-04-20T00:00:00.000Z</published>
    <updated>2018-04-20T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="Centos配置gitlab镜像并且启动"><a href="#Centos配置gitlab镜像并且启动" class="headerlink" title="Centos配置gitlab镜像并且启动"></a>Centos配置gitlab镜像并且启动</h1><p>在本机上创建目录结构，然后上传到虚拟机去运行，使用的软件为Xshell，Xftp，记得把CA证书带上。</p><p>目录结构：</p><pre><code class="treeview">gitlab    config        ssl            gitlab.luna.cn.crt            gitlab.luna.cn.key    logs    docker-compose.yml</code></pre><p>docker-compose.yml文件，要说明的是这里的环境变量配置，是可以使用gitlab配置文件中的配置的，不过后续使用配置文件也可以。</p><pre><code class="yml">version: &#39;3&#39;services:    gitlab:      image: &#39;twang2218/gitlab-ce-zh:10.6.2&#39;      restart: unless-stopped      hostname: &#39;gitlab.luna.cn&#39;      container_name: gitlab1062      environment:        TZ: &#39;Asia/Shanghai&#39;        GITLAB_OMNIBUS_CONFIG: |          external_url &#39;http://gitlab.luna.cn/&#39;          registry_external_url &#39;https://gitlab.luna.cn&#39;          gitlab_rails[&#39;time_zone&#39;] = &#39;Asia/Shanghai&#39;          # gitlab_rails[&#39;smtp_enable&#39;] = true          # gitlab_rails[&#39;smtp_address&#39;] = &quot;smtp.exmail.qq.com&quot;          # gitlab_rails[&#39;smtp_port&#39;] = 465          # gitlab_rails[&#39;smtp_user_name&#39;] = &quot;xxxx@xx.com&quot;          # gitlab_rails[&#39;smtp_password&#39;] = &quot;password&quot;          # gitlab_rails[&#39;smtp_authentication&#39;] = &quot;login&quot;          # gitlab_rails[&#39;smtp_enable_starttls_auto&#39;] = true          # gitlab_rails[&#39;smtp_tls&#39;] = true          # gitlab_rails[&#39;gitlab_email_from&#39;] = &#39;xxxx@xx.com&#39;      ports:        - &#39;80:80&#39;        - &#39;443:443&#39;        - &#39;1022:22&#39;      volumes:        - ./data:/var/opt/gitlab        - ./config:/etc/gitlab        - ./logs:/var/log/gitlab</code></pre><p>上传到/root文件夹下</p><p><img src="https://www.github.com/loveshullf/Notes/raw/img/小书匠/使用gitlab构建基于docker的CI-2018-4/1524002559155.jpg" alt="gitlab文件夹上传"></p><p>Xshell中运行docker-compose up，等待….</p><h1 id="Centos配置防火墙"><a href="#Centos配置防火墙" class="headerlink" title="Centos配置防火墙"></a>Centos配置防火墙</h1><p>我列出配置需要用到的命令，主要打开http，https，docker-registry这几个服务和1022端口。<br>1022端口是为了ssh使用的。</p><pre><code class="bash">firewall-cmd --list-ports #查看打开的端口firewall-cmd --list-services #查看打开的服务firewall-cmd --get-services  #查看可以打开的服务firewall-cmd --add-service=xxx --permanent  #添加服务firewall-cmd --add-port=xx/tcp --permanent #添加端口firewall-cmd --reload      #打开操作之后要重载</code></pre><h1 id="windows上访问gitlab"><a href="#windows上访问gitlab" class="headerlink" title="windows上访问gitlab"></a>windows上访问gitlab</h1><p>域名为： gitlab.luna.cn 能访问，说明一切正常。<br>然后需要做的是：<br>1.需要创建一个管理员密码<br>2.管理员账号为root，用设置的密码登录。<br>3.如果第一次使用gitlab，你可以看看每个菜单，如果没有兴趣，就可以关闭了。</p><h1 id="Centos上配置gitlab-runner"><a href="#Centos上配置gitlab-runner" class="headerlink" title="Centos上配置gitlab-runner"></a>Centos上配置gitlab-runner</h1><p>gitlab-runner是一个很大的坑，我不知道我能不能说的清楚，不对的地方，希望大家指正。</p><p>安装官方的说法，runner需要先注册，从而让gitlab认识这个runner，从而触发runner运行job。</p><p>这里我使用的是runner的docker镜像。</p><p>1.首先创建一个文件夹用来放runner的配置文件，这里是/root/gitlab-runner。<br>2.然后是启动runner镜像，执行注册。注册的参数除了第一个和第二个参数之外，其他参数都可以后面配置，不用太纠结。</p><pre><code class="bash">  #运行镜像  docker run -d --name gitlab-runner-bate --restart always \  -v /var/run/docker.sock:/var/run/docker.sock \#这个配置可以让runner联通本机docker  -v /root/gitlab-runner/config:/etc/gitlab-runner \  gitlab/gitlab-runner:latest  #执行注册   docker exec -it gitlab-runner-bate gitlab-runner register</code></pre><p>3.注册之后，目录结构应该是这样的，然后配置文件应该是这样的。</p><pre><code class="treeview">gitlab-runner  config     config.toml  docker-compose.yml</code></pre><p>config.toml</p><pre><code class="yml">concurrent = 1check_interval = 0[[runners]]  name = &quot;test&quot;  url = &quot;http://gitlab.luna.cn/&quot;  token = &quot;040a9c35d32e1c9a912c006c8a10a6&quot;  executor = &quot;docker&quot;  [runners.docker]    tls_verify = false    image = &quot;docker:stable&quot;    privileged = false    disable_cache = false    volumes = [&quot;/var/run/docker.sock:/var/run/docker.sock&quot;, &quot;/cache&quot;]    shm_size = 0  [runners.cache]</code></pre><p>4.runner是否配置成功，可以用管理员登录gitlab去查看，成功的话，是可以看到的。<br>5.然后创建一个docker-compose来启动，就不用敲那么长docker run命令了。<br>docker-compose.yml</p><pre><code class="yml">version: &#39;3&#39;services:    runner:      image: &#39;gitlab/gitlab-runner:latest&#39;      container_name: gitlab-runner      restart: always       volumes:         - ./config:/etc/gitlab-runner        - /var/run/docker.sock:/var/run/docker.sock</code></pre><p>最后贴几个官方文档给大家参考，也给自己做下备忘。</p><p><a href="https://docs.gitlab.com/runner/configuration/" target="_blank" rel="noopener">gitlab-runner的配置</a><br><a href="https://docs.gitlab.com/runner/install/docker.html#docker-image-installation-and-configuration" target="_blank" rel="noopener">在容器中运行GitLab Runner</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h1 id=&quot;Centos配置gitlab镜像并且启动&quot;&gt;&lt;a href=&quot;#Centos配置gitlab镜像并且启动&quot; class=&quot;headerlink&quot; title=&quot;Centos配置gitlab镜像并且启动&quot;&gt;&lt;/a&gt;Centos配置gitlab镜像并且启动&lt;
      
    
    </summary>
    
      <category term="持续集成" scheme="http://blog.lunaselene.cn/categories/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
    
      <category term="gitlab" scheme="http://blog.lunaselene.cn/tags/gitlab/"/>
    
      <category term="docker" scheme="http://blog.lunaselene.cn/tags/docker/"/>
    
      <category term="aspnetcore" scheme="http://blog.lunaselene.cn/tags/aspnetcore/"/>
    
  </entry>
  
  <entry>
    <title>使用gitlab构建基于docker的持续集成（一）</title>
    <link href="http://blog.lunaselene.cn/%E4%BD%BF%E7%94%A8gitlab%E6%9E%84%E5%BB%BA%E5%9F%BA%E4%BA%8Edocker%E7%9A%84%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%88%E4%B8%80%EF%BC%89.html"/>
    <id>http://blog.lunaselene.cn/使用gitlab构建基于docker的持续集成（一）.html</id>
    <published>2018-04-19T00:00:00.000Z</published>
    <updated>2018-04-20T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h1><p>关于CI，我的简单理解就是，项目的一键编译+测试+部署发布，然后可以重复利用这个过程，你只要一提交代码，项目就发布完成了。</p><p>而docker，可以给编译，测试，部署提供环境支撑，简单来说，就是比传统CI更方便，简化了CI过程中的环境问题。</p><p>本来是有想法是部署到公网，让大家试一下效果的，但是由于部署gitlab非常消耗，我的小服务器抗不住，只好把过程记录下来，给大家一个参考，也给自己做个备忘。</p><p>先贴几张效果图吧，有个整体印象。</p><p><img src="https://www.github.com/loveshullf/Notes/raw/img/小书匠/使用gitlab构建基于docker的CI-2018-4/1524012232084.jpg" alt="git项目界面"></p><p><img src="https://www.github.com/loveshullf/Notes/raw/img/小书匠/使用gitlab构建基于docker的CI-2018-4/1524012665989.jpg" alt="docker仓库"></p><p><img src="https://www.github.com/loveshullf/Notes/raw/img/小书匠/使用gitlab构建基于docker的CI-2018-4/1524012721018.jpg" alt="CI界面"></p><p>本文大致是分三部分，基础准备，Centos主机上的配置，win主机的配置，最后发布测试。</p><h1 id="整体环境规划"><a href="#整体环境规划" class="headerlink" title="整体环境规划"></a>整体环境规划</h1><ul><li>本机（开发机）：win10系统<ul><li>开启Hyper-v</li><li>安装docker for windows</li><li>vs2017</li><li>使用自签名证书的话要导入证书</li><li>hosts设置域名：gitlab.luna.cn 映射gitlab服务器上</li></ul></li><li>gitlab服务器：Centos 7.3<ul><li>docker</li><li>docker-compose</li><li>导入CA证书   </li><li>设置hosts设置域名：gitlab.luna.cn 映射本机ip</li></ul></li><li>gitlab-runner：Centos7.3 （我把它部署到了gitlab服务器上了，规范的做法是应该分开部署）<ul><li>docker</li><li>docker-compose</li></ul></li></ul><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="CA证书"><a href="#CA证书" class="headerlink" title="CA证书"></a>CA证书</h2><p>我提供一个我用的证书，证书的域名为：gitlab.luna.cn<br>创建两个文本，然后复制下面代码，改文件名即可。<br>gitlab.luna.cn.crt</p><pre><code class="bash">-----BEGIN CERTIFICATE-----MIIDWzCCAkOgAwIBAgIBATANBgkqhkiG9w0BAQsFADAZMRcwFQYDVQQDEw5naXRsYWIubHVuYS5jbjAgFw0xODA0MTMxNjU2MDBaGA8yMTE4MDQxMzE2NTYwMFowGTEXMBUGA1UEAxMOZ2l0bGFiLmx1bmEuY24wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDfNr+I2/H7blGFJfpoN4DM3Z4eRolH439ElKkdIj99XiXQ0U2mIm57LaFORPGPh0ESqT4qKWSeIyQvPInBb97ACbVj30iqBoQPC919bHOjQpebp7L/8YMHZMqA7Njaq+a397d6bbtMTKX0nixmTSqqrohJhK6vvdKgjLhK1neLDmGw9wJwh40WIuOV8u/gQqGGnKmzJieMufowTcSPm9nM0rACYpUAdGCpMp1MFxpkRKd62LKzx36juaXKmwiLo9RsKlPGoZbyOjZhkEw2F0TQDSno5CKJIsO+GqK2Piu2o55bmhe8DOWv+v3BfGaM0Ne5injmCE+SUs7baInS7TqFAgMBAAGjgaswgagwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUtX0LUdEaIwJnFSIIVNwNBRX6Js8wCwYDVR0PBAQDAgGGMDsGA1UdJQQ0MDIGCCsGAQUFBwMBBggrBgEFBQcDAgYIKwYBBQUHAwMGCCsGAQUFBwMEBggrBgEFBQcDCDAZBgNVHREEEjAQgg5naXRsYWIubHVuYS5jbjARBglghkgBhvhCAQEEBAMCAPcwDQYJKoZIhvcNAQELBQADggEBACYKfo4KacODb202yW+GFuf14jzUtM7xVp9KfDbKfitpYJETNDouDoauZRmjJHHqTOMXlnVQjkgC01o5t/QcCT/XsiV+/5aqj+44Ww3POd9CizVId1luWC44UZ+tJxJmQqgn5fckH7SE5k8+tZrzQgZawbqE37mnCauWMTcLrUxEy36m4yQjrn5XCk2LRZt60kU2q/CbOyR7FCzF3Dv0+99rOfmA52THHlFxyoP4E20cEH/bVZ11wyTopCR9B7yzQykkJ3jeNylwEOWPnhDOk4+tZRedShv32tHM+XT9wuQ0+YgV+jjcM3PfqfhDSunln/i0dKHnkMRZyqLbSE4pOo8=-----END CERTIFICATE-----</code></pre><p>gitlab.luna.cn.key</p><pre><code class="bash">-----BEGIN RSA PRIVATE KEY-----MIIEpAIBAAKCAQEA3za/iNvx+25RhSX6aDeAzN2eHkaJR+N/RJSpHSI/fV4l0NFNpiJuey2hTkTxj4dBEqk+KilkniMkLzyJwW/ewAm1Y99IqgaEDwvdfWxzo0KXm6ey//GDB2TKgOzY2qvmt/e3em27TEyl9J4sZk0qqq6ISYSur73SoIy4StZ3iw5hsPcCcIeNFiLjlfLv4EKhhpypsyYnjLn6ME3Ej5vZzNKwAmKVAHRgqTKdTBcaZESnetiys8d+o7mlypsIi6PUbCpTxqGW8jo2YZBMNhdE0A0p6OQiiSLDvhqitj4rtqOeW5oXvAzlr/r9wXxmjNDXuYp45ghPklLO22iJ0u06hQIDAQABAoIBAGX8pdbqZ83xwd2MVLV5Zqg0OiKrJ95o26WCJyLgmxG1CqI2f7wAz2oIl0MjzRs/OURFf9nTv91hQQ80Idz4OFaWGQLg6lqFT6FwUmsUOmHF829zWB4JQ00FiGEP1qVTFb/It1SA/qsF+m2iN7cmWvBRfoPY09gIa0xf/3RyOXyW4ynzxN6OGUmXK7uuGmjJsG+yYUcIkpi2nVb9WhCB06sNZ/wLWhg9hHZTaiC/DQ3WmFp2pZCI8qoY5jD3rx0yKJmqrShYkphKHYuM9AnyRoMLTUJZIzHuiysbQMq50qunlEIz9mQdAvKH+ObP+AqXJSpyQ/11Xk45YqQyaJwP2wECgYEA783ihXtg7vS1Ymj7IRN07i0oXm16M+j7wgq/PpI/FJqL7S2Es3Ot3lqEsX4V5/HLgAwsH2kcNelkqmSzLE6CwxktmFqj16MBxGkteI5T0O8QE4+KcZFhM3JIMkuwPjHoQP9SoDfxblVOm01y0RqDR39Speh3ZQxZU/eg7hjiU+0CgYEA7koFyxzLUAbjB2jMHsMxejpyk2qFOgGjW2Poy38kPapeID7q9dUSUXDgqnPZ0hsrv0I58jrh+OK4+Nn9MtpJ2XtP116Jc6hvUOMplZALiU8oCU5IwCAGh6oVOiDfENTe7jRVwZYiYdBa5cfhprp3SThx1gCQVja1SJJ77E7u3fkCgYEApoYsVVE2IPnhs3L/YRqnynWlYN1ZTQ7vNPJNl9/q2h3wKUXArvUXuh7VooPSJn1sOYE6ap2NL4rhksnW+l+SwnSLiw72U9oocgIvx1XesmowmcTF+NNh0l378KFKxAXYKLqk4Am5KEspCQOhRb/Jhi7Ob9OchZkrtvlw0aaKFIkCgYEAtUcI60EHhuUGV7+o8YorHMJUIcO6gKt4W/FAy3b42hS+sKdM1iH3Yo+Nyv6Bae6TtFesf5O+Dzpj36Tuk34vCk1eKwjXZm5v6Mg3/Xjs3dOjMJkmjUqPzSteJK+XI1XeFrcnujL+Cw2X6RDLoKxgTQqsx1H8fCn4dbJCpj5SR/kCgYA3dJD4p66xs7NxreppPCiuJvdTcK5GNseLy0ZK/EIJhAaZd5eB43h2TwBWieY8hDEgeqO52Y4lwLVEPFLfnDvVhy5Vt21RY4DkubrLVrT9Qfi9FXoZDv1KFopMObRAdaaxh9h5SHjIUg6ABf5owQsB1y+cmaGYHIDkLttOmXVJEA==-----END RSA PRIVATE KEY----------BEGIN CERTIFICATE-----MIIDWzCCAkOgAwIBAgIBATANBgkqhkiG9w0BAQsFADAZMRcwFQYDVQQDEw5naXRsYWIubHVuYS5jbjAgFw0xODA0MTMxNjU2MDBaGA8yMTE4MDQxMzE2NTYwMFowGTEXMBUGA1UEAxMOZ2l0bGFiLmx1bmEuY24wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDfNr+I2/H7blGFJfpoN4DM3Z4eRolH439ElKkdIj99XiXQ0U2mIm57LaFORPGPh0ESqT4qKWSeIyQvPInBb97ACbVj30iqBoQPC919bHOjQpebp7L/8YMHZMqA7Njaq+a397d6bbtMTKX0nixmTSqqrohJhK6vvdKgjLhK1neLDmGw9wJwh40WIuOV8u/gQqGGnKmzJieMufowTcSPm9nM0rACYpUAdGCpMp1MFxpkRKd62LKzx36juaXKmwiLo9RsKlPGoZbyOjZhkEw2F0TQDSno5CKJIsO+GqK2Piu2o55bmhe8DOWv+v3BfGaM0Ne5injmCE+SUs7baInS7TqFAgMBAAGjgaswgagwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUtX0LUdEaIwJnFSIIVNwNBRX6Js8wCwYDVR0PBAQDAgGGMDsGA1UdJQQ0MDIGCCsGAQUFBwMBBggrBgEFBQcDAgYIKwYBBQUHAwMGCCsGAQUFBwMEBggrBgEFBQcDCDAZBgNVHREEEjAQgg5naXRsYWIubHVuYS5jbjARBglghkgBhvhCAQEEBAMCAPcwDQYJKoZIhvcNAQELBQADggEBACYKfo4KacODb202yW+GFuf14jzUtM7xVp9KfDbKfitpYJETNDouDoauZRmjJHHqTOMXlnVQjkgC01o5t/QcCT/XsiV+/5aqj+44Ww3POd9CizVId1luWC44UZ+tJxJmQqgn5fckH7SE5k8+tZrzQgZawbqE37mnCauWMTcLrUxEy36m4yQjrn5XCk2LRZt60kU2q/CbOyR7FCzF3Dv0+99rOfmA52THHlFxyoP4E20cEH/bVZ11wyTopCR9B7yzQykkJ3jeNylwEOWPnhDOk4+tZRedShv32tHM+XT9wuQ0+YgV+jjcM3PfqfhDSunln/i0dKHnkMRZyqLbSE4pOo8=-----END CERTIFICATE-----</code></pre><h2 id="虚拟机系统：安装Centos7-3"><a href="#虚拟机系统：安装Centos7-3" class="headerlink" title="虚拟机系统：安装Centos7.3"></a>虚拟机系统：安装Centos7.3</h2><p>安装的时候尤其要注意：</p><ul><li>开启网络，不开启，后续需要进到虚拟机开启，比较麻烦。</li><li>设置时区，不设置的话，时间会错误。</li><li>设置密码，root的密码，不说你也知道。</li><li>最小安装，就是默认，不要去选其他的乱七八糟的预装系统。<br>最后，要保证虚拟机能联网，主机能ping通虚拟机就可以了。</li></ul><h2 id="3-设置Centos的host"><a href="#3-设置Centos的host" class="headerlink" title="3.设置Centos的host"></a>3.设置Centos的host</h2><p>1.获取Centos主机的IP</p><pre><code class="bash">[root@gitlab etc]# ip addr</code></pre><p>2.找eth0的地址，我这里找到ip为：172.24.162.122<br>3.设置hosts</p><pre><code class="bash">[root@gitlab etc]# vi /etc/hosts</code></pre><p>4.添加一条记录 </p><pre><code class="bash">172.24.162.122   gitlab.luna.cn</code></pre><p>5.你也可以把hostname也一起改了。<br>5.退出保存即可。<br>6.ping一下域名，看一下是否可以通。</p><h2 id="设置windows的host"><a href="#设置windows的host" class="headerlink" title="设置windows的host"></a>设置windows的host</h2><p>1.打开C:\Windows\System32\drivers\etc\hosts文件<br>2.添加记录172.24.162.122   gitlab.luna.cn<br>3.最好重启。<br>4.尝试ping一下域名，是否能通，能通就行。</p><h2 id="Centos上docker安装"><a href="#Centos上docker安装" class="headerlink" title="Centos上docker安装"></a>Centos上docker安装</h2><p>获取docker官方源</p><pre><code class="bash">yum -y install yum-utilssudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</code></pre><p>如果获取不到源，可以用阿里源，vi /etc/yum.repos.d/docker-ce.repo替换掉内容为下面的</p><pre><code class="bash">[docker-ce-stable]name=Docker CE Stable - $basearchbaseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/7/$basearch/stableenabled=1gpgcheck=1gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg[docker-ce-stable-debuginfo]name=Docker CE Stable - Debuginfo $basearchbaseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/7/debug-$basearch/stableenabled=0gpgcheck=1gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg[docker-ce-stable-source]name=Docker CE Stable - Sourcesbaseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/7/source/stableenabled=0gpgcheck=1gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg[docker-ce-edge]name=Docker CE Edge - $basearchbaseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/7/$basearch/edgeenabled=0gpgcheck=1gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg[docker-ce-edge-debuginfo]name=Docker CE Edge - Debuginfo $basearchbaseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/7/debug-$basearch/edgeenabled=0gpgcheck=1gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg[docker-ce-edge-source]name=Docker CE Edge - Sourcesbaseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/7/source/edgeenabled=0gpgcheck=1gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg[docker-ce-test]name=Docker CE Test - $basearchbaseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/7/$basearch/testenabled=0gpgcheck=1gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg[docker-ce-test-debuginfo]name=Docker CE Test - Debuginfo $basearchbaseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/7/debug-$basearch/testenabled=0gpgcheck=1gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg[docker-ce-test-source]name=Docker CE Test - Sourcesbaseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/7/source/testenabled=0gpgcheck=1gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg</code></pre><p>安装docker</p><pre><code class="bash">#刷新yum源yum makecache fast#安装docker-ceyum -y install docker-ce</code></pre><p>最后最好配置一下docker仓库源，不然下载镜像会很慢。我配置的阿里云的源。</p><h2 id="Centos上docker-compose安装"><a href="#Centos上docker-compose安装" class="headerlink" title="Centos上docker-compose安装"></a>Centos上docker-compose安装</h2><p>这里有点坑，我推荐的是安装一个python3和python2共存环境，然后从github上直接下载docker-compose<br>因为我网上看到的是python3支持yml文件的中文注释。</p><p><a href="https://github.com/docker/compose/releases" target="_blank" rel="noopener">github上docker-compose最新版本地址</a></p><p>以下是参考命令，不要复制全部运行，会有问题<br>安装python3，并且和Python2共存</p><pre><code class="bash">mv /usr/bin/python2.7 /usr/bin/python2.7.5　　# 保留默认版本python为python2.7.5ln -s /usr/bin/python2.7.5 /usr/local/bin/python2.7.5　　# 创建软连接#yum修改ll /usr/bin/yum*　　# 查看/usr/bin/目录下所有yum文件（7个）头部vi /usr/bin/yum*　　# 修改/usr/bin/目录下所有yum文件（7个）头部#!/usr/bin/python —&gt; #!/usr/bin/python2.7.5　vi /usr/libexec/urlgrabber-ext-down　　# 修改/usr/libexec/目录下 urlgrabber-ext-down头部#!/usr/bin/python —&gt; #!/usr/bin/python2.7.5#firewall也要修改ll /usr/bin/firewall* #查看，2个vi /usr/bin/firewall* #修改vi /usr/sbin/firewalld #修改#编译环境yum -y groupinstall &#39;Development Tools&#39; yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel#下载python3yum -y install wgetwget https://www.python.org/ftp/python/3.6.2/Python-3.6.2.tgz #编译，就不一步一步解释了tar zxvf Python-3.6.2.tgzcd Python-3.6.2./configuremake allmake installmake cleanmake distcleanrm -rf /usr/bin/pythonrm -rf /usr/bin/python3rm -rf /usr/bin/python3.6ln -s /usr/local/bin/python3.6 /usr/bin/pythonln -s /usr/local/bin/python3.6 /usr/bin/python3ln -s /usr/local/bin/python3.6 /usr/bin/python3.6/usr/bin/python -V/usr/bin/python3 -V/usr/bin/python3.6 -Vrm -rf /usr/local/bin/pythonrm -rf /usr/local/bin/python3ln -s /usr/local/bin/python3.6 /usr/local/bin/pythonln -s /usr/local/bin/python3.6 /usr/local/bin/python3python -Vpython3 -Vpython3.6 -V</code></pre><p>下载docker-compose</p><pre><code class="bash">curl -L https://github.com/docker/compose/releases/download/1.21.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-composechmod +x /usr/local/bin/docker-compose</code></pre><p>如果可以使用docker-compose命令基本算安装成功了吧。</p><h2 id="window下安装docker-for-windows就可以了，包含docker-compose"><a href="#window下安装docker-for-windows就可以了，包含docker-compose" class="headerlink" title="window下安装docker for windows就可以了，包含docker-compose"></a>window下安装docker for windows就可以了，包含docker-compose</h2><h2 id="Centos7-3导入CA证书"><a href="#Centos7-3导入CA证书" class="headerlink" title="Centos7.3导入CA证书"></a>Centos7.3导入CA证书</h2><pre><code class="bash">yum install ca-certificatesupdate-ca-trust force-enable#拷贝证书，foo.crt只是例子cp foo.crt /etc/pki/ca-trust/source/anchors/update-ca-trust extract</code></pre><h2 id="window10导入CA证书"><a href="#window10导入CA证书" class="headerlink" title="window10导入CA证书"></a>window10导入CA证书</h2><p>直接打开.crt证书</p><p><img src="https://www.github.com/loveshullf/Notes/raw/img/小书匠/使用gitlab构建基于docker的CI-2018-4/1524000104742.jpg" alt="安装证书"></p><p><img src="https://www.github.com/loveshullf/Notes/raw/img/小书匠/使用gitlab构建基于docker的CI-2018-4/1524000178679.jpg" alt="导入证书到本机计算机"></p><p><img src="https://www.github.com/loveshullf/Notes/raw/img/小书匠/使用gitlab构建基于docker的CI-2018-4/1524000330723.jpg" alt="选择导入位置"></p><p><img src="https://www.github.com/loveshullf/Notes/raw/img/小书匠/使用gitlab构建基于docker的CI-2018-4/1524000361878.jpg" alt="导入"></p><p><img src="https://www.github.com/loveshullf/Notes/raw/img/小书匠/使用gitlab构建基于docker的CI-2018-4/1524000406659.jpg" alt="完成"></p><p>导入之后打开证书应该是这样的</p><p><img src="https://www.github.com/loveshullf/Notes/raw/img/小书匠/使用gitlab构建基于docker的CI-2018-4/1524000473733.jpg" alt="验证导入成功"></p><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><p>最后科普一个Centos开机启动docker的方法，网上找来的怎么做开机启动脚本<br>1.chmod +x /etc/rc.d/rc.local<br>2.vi  /etc/rc.d/rc.local 添加/root/script/autostart.sh<br>3.vi /root/script/autostart.sh 添加/bin/systemctl start docker</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h1 id=&quot;开篇&quot;&gt;&lt;a href=&quot;#开篇&quot; class=&quot;headerlink&quot; title=&quot;开篇&quot;&gt;&lt;/a&gt;开篇&lt;/h1&gt;&lt;p&gt;关于CI，我的简单理解就是，项目的一键编译+测试+部署发布，然后可以重复利用这个过程，你只要一提交代码，项目就发布完成了。&lt;/p&gt;
      
    
    </summary>
    
      <category term="持续集成" scheme="http://blog.lunaselene.cn/categories/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
    
      <category term="gitlab" scheme="http://blog.lunaselene.cn/tags/gitlab/"/>
    
      <category term="docker" scheme="http://blog.lunaselene.cn/tags/docker/"/>
    
      <category term="aspnetcore" scheme="http://blog.lunaselene.cn/tags/aspnetcore/"/>
    
  </entry>
  
</feed>
